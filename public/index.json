
[{"content":" このブログについて # 主に技術の知見たまに趣味を吐き出すブログです。\n技術のアウトプットが主な目的ですが、別で執筆能力を高めようという狙いもあります。\n会社の上司にビジネス文書力が壊滅的（意訳）と言われたので\u0026hellip; \u0026#x1f62d;\n","date":"2024-09-13","externalUrl":null,"permalink":"/","section":"","summary":"","title":"","type":"page"},{"content":"","date":"2024-09-13","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"2024-09-13","externalUrl":null,"permalink":"/tags/ci/cd/","section":"Tags","summary":"","title":"CI/CD","type":"tags"},{"content":" やりたいこと # 本ブログのリポジトリを更新したタイミングで、もしpost/に更新があれば反映し、rapberrypiでホストしているブログの更新行いたい。\n構想 # 別ブランチでpostの更新を行う mainにマージする CIが動いてraspberrypi上で動いているブログを更新する。 調査事項 # どのようにアプリケーションをgithub actionsと連携してデプロイするか調査 github actions controllerとかいうのがあるので、それをデプロイして連携すればよさそう？ 実施内容 # action runner controllerをk8s上にデプロイする harborをデプロイする。 harborのデプロイ # raspberrypiで動かす制約上、arm64版しか使えないので、bitnami社製のhelmを利用\nsso連携 # 参考 https://goharbor.io/docs/1.10/administration/configure-authentication/oidc-auth/\nrobotアカウントを作成 robot$test sVThqUIgFOATO130MdEKeZwqgDGsPq6c\n$ docker login https://harbor.supaperman.net Username: \u0026lt;Username\u0026gt; Password: \u0026lt;Password\u0026gt; Action Items # https://qiita.com/gretchi/items/1032a25c5e1a1e77aee8 ","date":"2024-09-13","externalUrl":null,"permalink":"/posts/20240913_raspberrypi-github-action/","section":"Posts","summary":"","title":"github-actionからraspberrypiで構築したk8sにアプリをデプロイする","type":"posts"},{"content":"","date":"2024-09-13","externalUrl":null,"permalink":"/categories/k8s/","section":"Categories","summary":"","title":"K8s","type":"categories"},{"content":"","date":"2024-09-13","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2024-09-13","externalUrl":null,"permalink":"/tags/raspberrypi/","section":"Tags","summary":"","title":"Raspberrypi","type":"tags"},{"content":"","date":"2024-09-13","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":" TL;DR # HashSetもあるが、BTreeSetの方が楽そう。\nlet a : BTreeSet\u0026lt;usize\u0026gt; = BTreeSet::new(); let key = 2 let it = a.range(key..).next().unwrap(); upper_boundも\nlet a : BTreeSet\u0026lt;usize\u0026gt; = BTreeSet::new(); let key = 2 let it = a.range(..key).next_back().unwrap(); ","date":"2024-09-07","externalUrl":null,"permalink":"/posts/20240907_rust-compete/","section":"Posts","summary":"","title":"【競プロ】RustのBTreeSetでlower_bound","type":"posts"},{"content":"","date":"2024-09-07","externalUrl":null,"permalink":"/tags/rust/","section":"Tags","summary":"","title":"Rust","type":"tags"},{"content":"","date":"2024-09-07","externalUrl":null,"permalink":"/categories/%E7%AB%B6%E3%83%97%E3%83%AD/","section":"Categories","summary":"","title":"競プロ","type":"categories"},{"content":"","date":"2024-09-06","externalUrl":null,"permalink":"/tags/k8s/","section":"Tags","summary":"","title":"K8s","type":"tags"},{"content":" 環境 # Raspberry Pi 3 Model B Raspberry Pi OS(Legacy, 64-bit) Lite Raspberry Pi 4 Raspberry Pi OS(Legacy, 64-bit) Lite 参考元 # https://www.technicalife.net/raspberry-pi-kubernetes/\nInstall raspberry pi os # $ sudo apt update $ sudo apt dist-upgrade 以下を/boot/cmdline.txtに書き込む。\ncgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1 swap無効化 # k8sがスワップ無効化を要求するため\n$ sudo dphys-swapfile swapoff $ sudo systemctl stop dphys-swapfile $ sudo systemctl disable dphys-swapfile ホスト名の変更 # $ sudo hostnamectl set-hostname k8s-master IP固定化 # ipを調べる\n$ ip addr ipを固定化する\n$ sudo vi /etc/dhcpcd.conf interface eth0 static ip_address=192.168.40.101/24 static routers=192.168.40.1 static domain_name_servers=192.168.40.1 /etc/hostsに対応表を記載\n127.0.0.1 localhost ::1 localhost ip6-localhost ip6-loopback ff02::1 ip6-allnodes ff02::2 ip6-allrouters 127.0.1.1 k8s-master 192.168.40.101 k8s-master 192.168.40.102 k8s-worker1 sudo nmtui # LegacyじゃないOSでは`sudo nmtui`で設定した。 Edit a connection \u0026gt; Wired connection 1 \u0026gt; IPv4 Configuration\n一旦再起動をかけておく\nOSの準備 # $ sudo apt install -y apt-transport-https curl ebtables arptables # change iptables settings $ sudo update-alternatives --set iptables /usr/sbin/iptables-legacy $ sudo update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy $ sudo update-alternatives --set arptables /usr/sbin/arptables-legacy $ sudo update-alternatives --set ebtables /usr/sbin/ebtables-legacy $ sudo -i # cat \u0026lt;\u0026lt;EOF | sudo tee /etc/modules-load.d/k8s.conf overlay br_netfilter EOF # modprobe overlay # modprobe br_netfilter # cat \u0026gt; /etc/sysctl.d/99-kubernetes-cri.conf \u0026lt;\u0026lt;EOF net.bridge.bridge-nf-call-iptables = 1 net.bridge.bridge-nf-call-ip6tables = 1 net.ipv4.ip_forward = 1 EOF # sysctl --system Install containerd # $ sudo apt install -y apt-transport-https ca-certificates curl software-properties-common register repositories # $ curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg $ echo \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable\u0026#34; | sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null $ sudo mkdir -p /etc/apt/keyrings $ curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg $ sudo apt update Install # $ sudo apt install containerd.io $ sudo mkdir -p /etc/containerd $ containerd config default | sudo tee /etc/containerd/config.toml $ sudo systemctl restart containerd $ sudo systemctl enable containerd cgroups設定を変更 # $ sudo vi /etc/containerd/config.toml SystemdCgroupがfalseなので\nSystemdCgroup = true に変更\nkubernetesのインストール # 参考\nhttps://kubernetes.io/ja/docs/setup/production-environment/tools/kubeadm/install-kubeadm/\nsudo apt-get update sudo apt-get install -y apt-transport-https ca-certificates curl gpg curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg echo \u0026#39;deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /\u0026#39; | sudo tee /etc/apt/sources.list.d/kubernetes.list sudo apt update sudo apt install -y kubelet=1.28.2-1.1 kubeadm=1.28.2-1.1 kubectl=1.28.2-1.1 sudo apt-mark hold kubelet kubeadm kubectl 入れたバージョンは1.28.2\nクラスタを作成 # master Nodeでのみ実行 # flannelを使用するため cidr に 10.244.0.0/16 を設定\n$ sudo kubeadm init --pod-network-cidr=10.244.0.0/16 $ mkdir -p $HOME/.kube $ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config $ sudo chown $(id -u):$(id -g) $HOME/.kube/config flannelをインスコ\n$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml worker Nodeで実行 # worker node 追加コマンド (kubeadm を実行すると発行される)\nkubeadm join 192.168.40.101:6443 --token ifys4k.v2qbbbs7ce9e34fi \\ --discovery-token-ca-cert-hash sha256:acac3d22c2d8d1b70254b01dce0e5a6233b1a629f94627460fa9b38464d469f0 再生成は以下のコマンド\n$ kubeadm token create --print-join-command ssh接続 # raspberry pi側でsshを起動\n$ sudo systemctl start ssh $ sudo systemctl enable ssh PC側で鍵を作成\n# 鍵の作成 $ ssh-keygen # 鍵の移送 $ ssh-copy-id -i \u0026lt;公開鍵のパス\u0026gt; [raspberrypiのusername]@[raspberrypiのIPアドレス] .ssh/configを編集\nHost k8s-master HostName 192.168.40.101 User supaman Port 22 IdentityFile ~/.ssh/k8s/id_rsa_master raspberrypiにログイン\nssh k8s-master パスワード接続を無効化\nPasswordAuthentication no kubectlをlocal上で動かせるようにする .kube/configをlocalに持ってきたらいけた .kube/configにはcluster, contexts, usersを登録する. その一覧をlocal PCで持っておけばいい $ scp supaman@192.168.40.101:~/.kube/config ~/.kube/config metrics-serverを導入する # cluster内のリソース使用状況データを集約する\n$ kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml deploymentに以下を追記\nspec: template: spec: containers: - name: metrics-server +\tcommand: +\t- /metrics-server +\t- --kubelet-insecure-tls +\t- --kubelet-preferred-address-types=InternalIP master nodeにもdeployするようにする # $ k describe node k8s-master ... Taints: node-role.kubernetes.io/control-plane:NoSchedule この状態ではMaster Nodeには何もデプロイされない taintsの値の後ろに-をつける\n# kubectl taint nodes k8s-master node-role.kubernetes.io/control-plane:NoSchedule- nerdctl install # wget https://github.com/containerd/nerdctl/releases/download/v1.7.4/nerdctl-1.7.4-linux-arm64.tar.gz sudo tar Cxzvvf /usr/local/bin nerdctl-1.7.4-linux-arm64.tar.gz ","date":"2024-09-06","externalUrl":null,"permalink":"/posts/20240906_k8s-on-raspberrypi/","section":"Posts","summary":"","title":"k8s on raspberrypi","type":"posts"},{"content":"","date":"2024-09-06","externalUrl":null,"permalink":"/categories/blog/","section":"Categories","summary":"","title":"Blog","type":"categories"},{"content":"","date":"2024-09-06","externalUrl":null,"permalink":"/tags/blowfish/","section":"Tags","summary":"","title":"Blowfish","type":"tags"},{"content":"","date":"2024-09-06","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":"n番煎じという感じですが、このブログ作成時の備忘録として残しておきます。\nWhat is # Hugo # Static Site Generatorの一つです。\nブログをmarkdownで執筆できる \u0026amp; テーマを選ぶだけでそれっぽいブログを構築できることから今回採用しました。\nhttps://gohugo.io/\nBlowfish # Hugoのテーマの一つです。\nTag, Category機能がある \u0026amp; Postsをカード表示できてモダンな感じがするので採用しました。\nあとは好みです。\nhttps://github.com/nunocoracao/blowfish\nBuild # Blowfishのドキュメントを見ながら構築していきます。\n整備されていてありがたい \u0026#x2728;\nHugo自体のインストール\nbrew install hugo 新規サイトの構築\nhugo new site mySite 今回はgit submoduleでBlowfishを導入します。\ncd mySite git init git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish ","date":"2024-09-06","externalUrl":null,"permalink":"/posts/20240906_hugo-blowfish/","section":"Posts","summary":"","title":"Hugo+Blowfishで個人ブログを作成する","type":"posts"},{"content":" ME まだ何も作ってないからみないで\n","externalUrl":null,"permalink":"/about/","section":"","summary":"","title":"About","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]